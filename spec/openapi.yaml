openapi: 3.1.0
info:
  title: Paymium API
  description: |
    The Paymium API allows developers to extend the capabilities of the Paymium platform, from reading the latest ticker to automating trades with bots.

    It is possible to, among other things:
    * Access public data (ticker, asks, bids, trades, etc...)
    * Authenticate users with their permission using OAuth2 *
    * Access authenticated user balances, trades, and other data *
    * Automate trading *

    _* Authenticating users is only available to developers that have a fully verified and approved Paymium account. On the other hand, public data is available to everyone_.
    # API Changes
    The official changelog is currently on [GitHub](https://github.com/paymium/api-documentation/blob/master/API-CHANGES.md).
    You can be notified of the latest changes by watching our official [documentation repository](https://github.com/paymium/api-documentation).

    # General information
    ## Formats and required HTTP request headers
    The API will only answer with JSON or empty responses. It expects parameters to be passed in JSON with the correct `Content-Type: application/json` being set.
    ## Localization
    The relevant results and error messages will be localized to the language associated to the user, currently English and French are supported.
    ## Datetime formats
    Datetime values will be returned as regular JSON format and Unix timestamps, the timestamps are suffixed with `_int`.
    ## Error handling
    Whenever an error is encountered, the answer to a JSON API call will have:
    * An HTTP 422 status (Unprocessable entity) or HTTP 400 (Bad request)
    * A JSON array of localized error messages in the `errors` attribute of the response body
    ### Example
    ```json
      {
        "errors": [
        "Operations account operations amount is greater than your available balance (1781.96 EUR)"
        "Amount can't be greater than your limit (1781.96 EUR)"
        ]
      }
    ```
    ## Successful calls
    If the API call was successful, the platform will answer with:
    * An HTTP 200 status (OK) or HTTP 201 (Created),
    * A JSON representation of the entity being created or updated if relevant
    ## Rate-limiting
    API calls are rate-limited by IP to 86400 calls per day (one per second on average). Information about the status of the limit can be found in the `X-RateLimit-Limit` and `X-RateLimit-Remaining` HTTP headers.

    **Example response with rate-limit headers**

        HTTP/1.1 200
        Content-Type: application/json; charset=utf-8
        X-Ratelimit-Limit: 5000
        X-Ratelimit-Remaining: 4982
        Date: Wed, 30 Jan 2013 12:08:58 GMT

    ## Examples
    Examples in the documentation are using the `ccxt` library, which supports Paymium's API and is available for Python, JavaScript and PHP.

    Installation instructions can be found on [GitHub](https://github.com/ccxt/ccxt).
  termsOfService: https://www.paymium.com/page/tos
  contact:
    email: support@paymium.com
  version: 1.1.1
  x-logo:
    url: https://raw.githubusercontent.com/Paymium/api-documentation/master/web/images/logoBranding.svg
    href: https://www.paymium.com/page/developers
servers:
  - url: https://paymium.com/api/v1
security:
  - ApiKey: []
    ApiSignature: []
    ApiNonce: []
  - OAuth2:
      - basic
tags:
  - name: Public data
    description: Public data (ticker, asks, bids, trades) can be accessed without authentication.
  - name: User
  - name: Order
  - name: Transfer
  - name: Merchant
    description: |
      The Merchant API enables merchants to securely sell goods and services and get paid in Bitcoin. The API makes it possible for the merchant to completely eliminate the risk of market fluctuations when requesting to receive fiat currency in their account. It is also possible to keep a part of the payment in Bitcoin without having it converted at a guaranteed rate.
      The API allows developers to integrate Bitcoin payments very tightly into their platforms, pre-packaged plugins are also available for a growing list of popular e-commerce frameworks.
      For merchants that have very simple needs payment buttons are also available, these buttons remove the integration completely by allowing merchants to simply include a code snippet on a static HTML page, or on a blog to receive fixed-amount payments.
      # Payment creation
      ## Authentication
      _The 'merchant token' authentication mechanism has been removed please use an [API token](#token-authentication) or an [OAuth2 token](#oauth2-authentication) instead with the 'merchant' scope._
      ### Description
      A payment is created by a merchant platform when the customer chooses Bitcoin as his desired checkout option.
      The merchant platform can then :
      * display the payment Bitcoin address on his own web interface,
      * include the Paymium web interface url in an iframe in order to display a payment pop-up as an overlay,
      * redirect the buyer to the payement's URL (see below), in this case the payment is displayed on a separate screen
      To display the payment request to the user, the `https://paymium.com/invoice/{UUID}` can be used, this is used by the e-commerce framework plugins.
      ![invoice](https://raw.githubusercontent.com/Paymium/api-documentation/master/web/images/display-invoice.png "Invoice")

      Once the payment request is displayed, the customer has 15 minutes to send the appropriate amount.
      Paymium notifies the merchant of the completion of his payment via the associated callback (for which an URL may be provided when creating the payment request), once one Bitcoin confirmation for the payment is received the funds are credited to the merchant's account, a callback notification is then made.
  - name: WebSocket
    description: |
      # Overview
      A [socket.io](http://socket.io) endpoint is available to receive public data. This allows you to receive new data without having to poll the server.
      The socket.io socket will emit a `stream` event when new data is available. The received JSON data contains one or more of the properties listed below, depending on what was updated.
      ## Socket.io configuration
      Socket.io must connect to `https://paymium.com/<public or user>` and the `path` option must be set to `/ws/socket.io`.

      ### Node.js example
      Assuming you have node.js installed, you can install the socket.io client library by running `npm install socket.io-client`.
      The code below shows how to connect to the Paymium socket, and outputs any received data to the console.
      ```javascript
        var io = require('socket.io-client');

        var socket = io.connect('https://paymium.com/public', {
        path: '/ws/socket.io'
        });

        console.log('CONNECTING');

        socket.on('connect', function() {
        console.log('CONNECTED');
        console.log('WAITING FOR DATA...');
        });

        socket.on('disconnect', function() {
        console.log('DISCONNECTED');
        });

        socket.on('stream', function(data) {
          console.log('GOT DATA:');
          console.log(data);
        });
      ```
      Websockets are implemented using **socket.io v1.3**.
      # Public socket
      ## Subscribing
      You must connect your socket.io client to `paymium.com/public`, setting the path option to `/ws/socket.io`. When new data is available, a `stream` event is triggered.
      ## NodeJS example

      ```javascript
        var io = require('socket.io-client');

        var socket = io.connect('https://paymium.com/public', {
        path: '/ws/socket.io'
        });

        console.log('CONNECTING');

        socket.on('connect', function() {
        console.log('CONNECTED');
        console.log('WAITING FOR DATA...');
        });

        socket.on('disconnect', function() {
        console.log('DISCONNECTED');
        });

        socket.on('stream', function(publicData) {
        console.log('GOT DATA:');
        console.log(publicData);
        });
      ```
      ## Public data
      The `stream` event will emit an object when new data is available. The object will have properties **only for the data that changed**.
      ### publicData.ticker
      If the ticker changed, `publicData.ticker` will contains the new ticker information.
      Example:
      ```javascript
        {
        ticker: {
          high: "275",
          low: "275",
          volume: "0.10909089",
          bid: "205",
          ask: "275",
          midpoint: "240",
          vwap: "275",
          at: 1446464202,
          price: "275",
          open: "270",
          variation: "1.8519",
          currency: 'EUR',
          trade_id: '460aff60-8fff-4fb0-8be5-2f8dc67758c2'
          }
        }
      ```
      ### publicData.trades
      If new trades are executed, `publicData.trades` will be an array containing the new trades.
      Example:
      ```javascript
        {
            trades: [
                {
                price: "275",
                traded_btc: "0.03636363",
                timestamp: 1446464202000,
                currency: 'EUR'
                }
            ]
        }
      ```
      ### publicData.bids
      If buy orders have changed (created, changed, or deleted), `publicData.bids` will be an array containing the modified orders. Orders are aggregated by price. If `amount` is `0`, there are no more orders at this price.
      Example:
      ```javascript
        {
            bids: [
                {
                    timestamp: 1424208720,
                    amount: "17.43992373",
                    price: "265",
                    currency: 'EUR'
                }
            ]
        }
      ```
      ### publicData.asks
      If sell orders have changed (created, changed, or deleted), `publicData.asks` will be an array containing the modified orders. Orders are aggregated by price. If `amount` is `0`, there are no more orders at this price.
      Example:
      ```javascript
        {
            asks: [
                {
                    timestamp: 1424208720,
                    amount: 17.43992373,
                    price: 275,
                    currency: 'EUR'
                }
            ]
        }
      ```
      # User socket
      ## Subscribing
      You must connect your socket.io client to `https://paymium.com/user`, setting the path option to `/ws/socket.io`.
      You must emit a `channel` event with the user channel id. This channel id is available in the user's json (`/api/v1/user`).
      When new data is available, a `stream` event is triggered.
      ## NodeJS example
      ```javascript
        var io = require('socket.io-client');

        var socket = io.connect('https://paymium.com/user', {
            path: '/ws/socket.io'
        });

        console.log('CONNECTING');

        socket.on('connect', function() {
            console.log('CONNECTED');
            console.log('WAITING FOR DATA...');
        });

        // Replace USER_CHANNEL_ID with the channel id of the user
        socket.emit('channel', 'USER_CHANNEL_ID');

        socket.on('disconnect', function() {
            console.log('DISCONNECTED');
        });

        socket.on('stream', function(userData) {
            console.log('GOT DATA:');
            console.log(userData);
        });
      ```
      ## User data
      The `stream` event will emit an object when new data is available. The object will have properties **only for the data that changed**.
      ### userData.balance_eur
      If the available EUR balance changed, `userData.balance_eur` will contain the new balance.
      ```javascript
        {
            balance_eur: "410.04"
        }
      ```
      ### userData.locked_eur
      If the locked EUR balance changed, `userData.locked_eur` will contain the new balance.
      ```javascript
        {
            locked_eur: "20.24"
        }
      ```
      ### userData.balance_btc
      If the available BTC balance changed, `userData.balance_btc` will contain the new balance.
      ```javascript
        {
            balance_btc: "53.29811458"
        }
      ```
      ### userData.locked_btc
      If the locked BTC balance changed, `userData.locked_btc` will contain the new balance.
      ```javascript
        {
            locked_btc: "0"
        }
      ```
      ### userData.orders
      If user orders have changed (created, filled, cancelled, etc...), `userData.orders` will be an array containing the modified orders. You can check the state of the orders to handle them properly.
      Example:
      ```javascript
        {
            orders: [
                {
                    uuid: '89d4b612-5e6a-4154-94f3-120d03f4e891',
                    amount: "1",
                    currency_amount: "10",
                    state: "pending_execution",
                    btc_fee: "0",
                    currency_fee: "0",
                    updated_at: '2015-11-02T11:36:41.000Z',
                    created_at: '2015-11-02T11:36:41.000Z',
                    currency: 'EUR',
                    comment: null,
                    type: 'MarketOrder',
                    traded_btc: "0",
                    traded_currency: "0",
                    direction: 'buy',
                    price: "1000",
                    account_operations: []
                }
            ]
        }
      ```
paths:
  /countries:
    get:
      tags:
        - Public data
      summary: Get countries
      description: Get list of countries
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.publicGetCountries())
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.publicGetCountries())
      operationId: get-countries
      responses:
        '200':
          description: An array of countries
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    iso_alpha2:
                      type: string
                      description: ISO 3166-1 alpha-2 country code
                      examples:
                        - FR
                    iso_alpha3:
                      type: string
                      description: ISO 3166-1 alpha-3 country code
                      examples:
                        - FRA
                    accepted:
                      type: boolean
                      description: We currently serve the residents of countries when the flag is set to true
                    card_partner_accepted:
                      type: boolean
                      description: Describes whether our card partner is accepted for this country or not
                    name_fr:
                      type: string
                      description: French name
                      examples:
                        - France
                    name_en:
                      type: string
                      description: English name,
                      examples:
                        - France
                    name_es:
                      type: string
                      description: Spanish name
                      examples:
                        - Francia
                    name_de:
                      type: string
                      description: Deutch name
                      examples:
                        - Frankreich
                    name_it:
                      type: string
                      description: Italian name
                      examples:
                        - Francia
                    telephone_code:
                      type: integer
                      description: Country dialing code
                      examples:
                        - 33
      security: []
  /currencies:
    get:
      tags:
        - Public data
      summary: Get currencies
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_PRIVATE_API_KEY',
              })

              console.log(paymium.id, await paymium.publicGetCurrencies())
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.publicGetCurrencies())
      operationId: get-countries-pet
      description: Get list of currencies
      responses:
        '200':
          description: An array of currencies
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    symbol:
                      type: string
                      description: symbol of the currency
                      examples:
                        - ETH
                    code:
                      type: string
                      description: code of the currency
                      examples:
                        - ETH
                    precision:
                      type: string
                      description: precision of 10^-8 on the currency amount
                      examples:
                        - '8'
                    name:
                      type: boolean
                      description: name of the currency
                      examples:
                        - false
                    type:
                      type: string
                      description: indicate if it is a crypto or a fiat currency
                      examples:
                        - crypto
                    deposit:
                      type: boolean
                      description: if true, a deposit is accepted on this currency
                      examples:
                        - false
                    withdraw:
                      type: boolean
                      description: if true, a withdraw is accepted via this currency
                    withdraw_limit_min:
                      type: string
                      examples:
                        - 'null'
                    withdraw_limit_max:
                      type: string
                      examples:
                        - 'null'
                    charge_plan_limit_min:
                      type: string
                      examples:
                        - '0.00000001'
                    charge_plan_limit_max:
                      type: string
                      examples:
                        - '100.0'
                    email_transfer:
                      type: boolean
                      description: if true, an email transfer is accepted via this currency
                    internal_transfer:
                      type: boolean
                      description: if true, an internal transfer is accepted via this currency
                      examples:
                        - false
                    payment_request:
                      type: boolean
                      description: if true, a payment request is accepted via this currency
                      examples:
                        - false
                    display_balance:
                      type: boolean
                      description: if true, one can display the balance of this currency
                    trading:
                      type: array
                      items:
                        type: string
                    swap:
                      type: array
                      items:
                        type: string
                    pairs:
                      type: object
                      properties: {}
                      examples:
                        - LTC-EUR
                    recurring_buy_plan:
                      type: array
                      items:
                        type: string
                    uri_scheme:
                      type: string
                      examples:
                        - litecoin
                    authorize_hd_walled_creation:
                      type: boolean
                      examples:
                        - false
      security: []
  /data/{currency}/ohlcv:
    get:
      tags:
        - Public data
      summary: Get OHLCV
      operationId: get-ohlcv
      description: Read open high low close volume data
      x-codeSamples:
        - lang: JavaScript
          source: |-
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
            let paymium = new ccxt.paymium({
            apiKey: 'YOUR_PUBLIC_API_KEY',
            secret: 'YOUR_SECRET_PRIVATE_KEY',
            })

            console.log(paymium.id, await paymium.fetchOHLCV("eur","1m",undefined,undefined))
            })();
        - lang: Python
          source: |-
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
            'apiKey': 'YOUR_PUBLIC_API_KEY',
            'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.fetch_ohlcv ('eur', '1m', None, None))
      parameters:
        - name: currency
          in: path
          required: true
          schema:
            type: string
            enum:
              - eur
        - name: interval
          in: query
          description: Interval between each ohlcv compute. Iteration can not exceed 1000 (default 500)
          schema:
            type: string
            enum:
              - 1m
              - 3m
              - 5m
              - 15m
              - 30m
              - 1h
              - 2h
              - 4h
              - 6h
              - 8h
              - 12h
              - 1d
              - 3d
              - 1w
              - 1M
        - name: startTime
          in: query
          description: Number of seconds since the Unix Epoch of the oldest ohlcv to fetch. Can be filled if endTime is filled too.
          schema:
            type: integer
        - name: endTime
          in: query
          description: Number of seconds since the Unix Epoch of the last ohlcv to fetch. Can be filled if startTime is filled too.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                examples:
                  - - 1615816800000
                    - '47440.0'
                    - '50000.0'
                    - '42000.0'
                    - '43000.0'
                    - '0.05321696'
                items:
                  type: array
                  items:
                    type: string
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    description: The error description
                    examples:
                      - Interval / StartTime / EndTime does not match
                    enum:
                      - Interval / StartTime / EndTime does not match
                      - Limit has not correct range
      security: []
  /data/{currency}/ticker:
    get:
      tags:
        - Public data
      summary: Get latest ticker data
      operationId: get-latest-ticker
      description: Read latest ticker data
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_PRIVATE_API_KEY',
              })

              console.log(paymium.id, await paymium.publicGetDataCurrencyTicker({ "currency": "eur" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.publicGetDataCurrencyTicker({"currency": 'eur'}))
      parameters:
        - name: currency
          in: path
          required: true
          schema:
            type: string
            enum:
              - eur
              - btc
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  high:
                    type: string
                    description: 24h high price
                    examples:
                      - '45998.99'
                  low:
                    type: string
                    description: 24h low price
                    examples:
                      - '37210.0'
                  volume:
                    type: string
                    description: 24h volume
                    examples:
                      - '39.77651173'
                  bid:
                    type: string
                    description: bid price
                    examples:
                      - '40600.0'
                  ask:
                    type: string
                    description: ask price
                    examples:
                      - '40783.75'
                  midpoint:
                    type: string
                    description: midpoint price
                    examples:
                      - '40691.875'
                  vwap:
                    type: string
                    description: Volume-Weighted Average Price
                    examples:
                      - '40509.86537845'
                  at:
                    type: integer
                    description: timestamp
                    examples:
                      - 1619184394
                  price:
                    type: string
                    description: price of latest trade
                    examples:
                      - '40600.0'
                  open:
                    type: string
                    description: 24h open price
                    examples:
                      - '45998.99'
                  variation:
                    type: string
                    description: 24h variation (percentage)
                    examples:
                      - '-11.7372'
                  currency:
                    type: string
                    description: ISO 4217 currency code
                    examples:
                      - EUR
                  trade_id:
                    type: string
                    description: ID of the latest trade on Paymium
                    examples:
                      - 0a31a001-2deb-48f1-b413-f1a31a9f97c1
                  size:
                    type: string
                    description: Amount in BTC of the latest trade on Paymium
                    examples:
                      - '0.0052'
      security: []
  /data/{currency}/trades:
    get:
      tags:
        - Public data
      summary: List latest trades
      operationId: get-latest-trades
      description: Read the latest executed trades
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_PRIVATE_API_KEY',
              })

              console.log(paymium.id, await paymium.publicGetDataCurrencyTrades({ "currency": "eur" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.publicGetDataCurrencyTrades({"currency": 'eur'}))
      parameters:
        - name: currency
          in: path
          required: true
          schema:
            type: string
            enum:
              - eur
              - btc
        - name: since
          in: query
          description: Number of seconds since the Unix Epoch of the oldest trade to fetch.
          schema:
            type: integer
      responses:
        '200':
          description: An array of trades
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                      description: unique ID of trade
                      examples:
                        - 59f9c458-cb22-48d6-9103-0b6e54130e29
                    traded_btc:
                      type: string
                      description: amount of BTC traded
                      examples:
                        - '0.153'
                    traded_currency:
                      type: string
                      description: amount of currency traded
                      examples:
                        - '102.51'
                    created_at:
                      type: string
                      description: date created
                      format: date-time
                      examples:
                        - '2014-01-07T11:30:59Z'
                    currency:
                      type: string
                      description: currency
                      examples:
                        - EUR
                    side:
                      type: string
                      description: order type ("buy" or "sell")
                      examples:
                        - buy
                    price:
                      type: string
                      description: price per BTC
                      examples:
                        - '670.0'
                    created_at_int:
                      type: integer
                      description: Number of seconds since Unix Epoch of the trade
                      examples:
                        - 1389094259
      security: []
  /data/{currency}/depth:
    get:
      tags:
        - Public data
      summary: Get market depth
      operationId: get-market-depth
      description: Read the market depth, bids and asks are grouped by price.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_PRIVATE_API_KEY',
              })

              console.log(paymium.id, await paymium.publicGetDataCurrencyDepth({ "currency": "eur" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.publicGetDataCurrencyDepth({"currency": 'eur'}))
      parameters:
        - name: currency
          in: path
          required: true
          schema:
            type: string
            enum:
              - eur
              - btc
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  bids:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: string
                          examples:
                            - '10484.15571436'
                        price:
                          type: string
                          examples:
                            - '35500.0'
                  asks:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: string
                          examples:
                            - '10484.15571436'
                        price:
                          type: string
                          examples:
                            - '35500.0'
      security: []
  /user:
    get:
      tags:
        - User
      summary: Get user info
      operationId: get-user-info
      description: Read the latest user info.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privateGetUser())
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privateGetUser())
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: account number/name
                    examples:
                      - BC-U123456
                  email:
                    type: string
                    description: email
                  locale:
                    type: string
                    description: locale code
                    examples:
                      - en
                  channel_id:
                    type: string
                    description: channel
                  meta_state:
                    type: string
                    description: kyc user status
                  balance_eur:
                    type: string
                    description: available EUR balance
                    examples:
                      - '1893.96'
                  locked_eur:
                    type: string
                    description: EUR balance locked in trading
                    examples:
                      - '300.00743886'
                  balance_btc:
                    type: string
                    description: available BTC balance
                    examples:
                      - '25.78866278'
                  locked_btc:
                    type: string
                    description: BTC balance locked in trading
                    examples:
                      - '1.0'
                  balance_lbtc:
                    type: string
                    description: available LBTC balance
                    examples:
                      - '0.8'
                  locked_lbtc:
                    type: string
                    description: LBTC balance locked in trading
                    examples:
                      - '0.5'
                  balance_bch:
                    type: string
                    description: available BCH balance
                    examples:
                      - '0.0'
                  locked_bch:
                    type: string
                    description: BCH balance locked in trading
                    examples:
                      - '0.0'
                  balance_eth:
                    type: string
                    description: available ETH balance
                    examples:
                      - '0.0'
                  locked_eth:
                    type: string
                    description: ETH balance locked in trading
                    examples:
                      - '0.0'
                  balance_ltc:
                    type: string
                    description: available LTC balance
                    examples:
                      - '0.0'
                  locked_ltc:
                    type: string
                    description: LTC balance locked in trading
                    examples:
                      - '0.0'
                  balance_bcio:
                    type: string
                    description: available BCIO balance
                    examples:
                      - '0.0'
                  locked_bcio:
                    type: string
                    description: BCIO balance locked in trading
                    examples:
                      - '0.0'
                  balance_bat:
                    type: string
                    description: available BAT balance
                    examples:
                      - '0.0'
                  locked_bat:
                    type: string
                    description: BAT balance locked in trading
                    examples:
                      - '0.0'
                  balance_dai:
                    type: string
                    description: available DAI balance
                    examples:
                      - '0.0'
                  locked_dai:
                    type: string
                    description: DAI balance locked in trading
                    examples:
                      - '0.0'
                  balance_etc:
                    type: string
                    description: available ETC balance
                    examples:
                      - '0.0'
                  locked_etc:
                    type: string
                    description: ETC balance locked in trading
                    examples:
                      - '0.0'
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - basic
  /user/orders:
    get:
      tags:
        - Order
      summary: List orders
      operationId: get-orders
      description: |
        List user'orders (market or limit)

        In previous API versions, this endpoint was also used to read other types of transfers. This is no longer the case, this is why `types` parameter is deprecated. you can consult [this endpoint](#tag/Transfer/operation/create-withdrawal) to list other transfers. 

        There are two types of pagination (exclusive) :
          * one that works with an `offset`/`limit` window (enabled if `offset` is set)
          * and another based on a `page` number and a number of items `per_page` (enabled by default or when `per_page` is set)

          Pagination is not eligible for active orders (orders in order book).
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privateGetUserOrders())
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privateGetUserOrders())
      parameters:
        - name: active
          in: query
          description: only show active orders
          schema:
            type: boolean
        - name: offset
          in: query
          description: pagination offset (must be set to enable offset/limit pagination)
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: pagination limit
          schema:
            type: integer
            default: 50
          examples:
            limit-20:
              summary: To list 20 orders from the second order (set 'offset' to 2)
              value: 20
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: types
          in: query
          deprecated: true
          description: (see filter by types
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - LimitOrder
                - MarketOrder
                - BitcoinDeposit
                - WireDeposit
                - Payment
                - EmailTransfer
                - EmailDeposit
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TradingOrder'
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - activity
    post:
      tags:
        - Order
      summary: Create order
      description: Create an order
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privatePostUserOrders({ "type": "LimitOrder", "currency": "EUR", "direction": "buy", "price": "54000", "currency_amount": "100" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privatePostUserOrders({ "type": "LimitOrder", "currency": "EUR", "direction": "buy", "price": "54000", "currency_amount": "100" }))
      operationId: create-order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - LimitOrder
                    - MarketOrder
                currency:
                  type: string
                  description: must be EUR
                direction:
                  type: string
                  enum:
                    - buy
                    - sell
                price:
                  description: price per BTC, must be omitted for market orders
                  type: number
                  example: 1
                amount:
                  type: number
                  description: BTC amount to trade. Either one of amount or currency_amount must be specified. When the amount is specified, the engine will buy or sell this amount of Bitcoins. When the currency_amount is specified, the engine will buy as much Bitcoins as possible for currency_amount or sell as much Bitcoins as necessary to obtain currency_amount.
                  example: 0.001
                  nullable: true
                currency_amount:
                  type: number
                  description: Currency amount to trade. Either one of amount or currency_amount must be specified. When the amount is specified, the engine will buy or sell this amount of Bitcoins. When the currency_amount is specified, the engine will buy as much Bitcoins as possible for currency_amount or sell as much Bitcoins as necessary to obtain currency_amount.
                  nullable: true
      responses:
        '201':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Order'
        '422':
          description: ONLY on `MarketOrder` type, this error can occured when market order `amount` or `currency_amount` (buy or sell) is too large against current market liquidity
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MarketProtection'
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - trade
  /user/orders/{uuid}:
    get:
      tags:
        - Order
      summary: Get order
      operationId: get-order
      description: Read details from a specific order.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privateGetUserOrdersUuid({ "uuid": "20f8dd15-ae87-4617-a353-d0996be60010" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privateGetUserOrdersUuid({ "uuid": "20f8dd15-ae87-4617-a353-d0996be60010" }))
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          example: d64e6450-bf17-44a7-9bc1-bb830610293a
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: order not found
          content: {}
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - activity
    delete:
      tags:
        - Order
      summary: Cancel order
      operationId: cancel-order
      description: Only active trade orders and email transfers may be canceled (an email notification will be sent)
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privateDeleteUserOrdersUuid({ "uuid": "20f8dd15-ae87-4617-a353-d0996be60010" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privateDeleteUserOrdersUuid({ "uuid": "20f8dd15-ae87-4617-a353-d0996be60010" }))
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          example: d64e6450-bf17-44a7-9bc1-bb830610293a
      responses:
        '204':
          description: ''
          content: {}
        '404':
          description: order not found
          content: {}
        '500':
          description: unable to cancel this order
          content: {}
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - trade
  /user/withdrawals:
    post:
      tags:
        - Transfer
      summary: Create withdrawal
      operationId: create-withdrawal
      description: Request BTC or fiat withdrawals. A confirmation is sent by email to the user before it can be executed.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privatePostUserWithdrawals({ "currency": "BTC", "amount": "1.0", "withdrawal_address": "1HdjGr6WCTcnmW1tNNsHX7fh4Jr5C2PeKe" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privatePostUserWithdrawals({ "currency": "BTC", "amount": "1.0", "withdrawl_address": "1HdjLr5WCThbmW1tNNsFX7fh4Jr5C3PeKe" }))
      parameters:
        - name: currency
          in: query
          required: true
          schema:
            type: string
            enum:
              - BTC
              - EUR
          example: EUR
        - name: amount
          in: query
          description: amount to transfer
          required: true
          schema:
            type: number
          example: 0.001
        - name: address
          in: query
          description: BTC address if withdrawing BTC
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: User must be approved.
          content: {}
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - withdraw
    get:
      tags:
        - Transfer
      summary: List withdrawals
      operationId: list-withdrawals
      description: List withdrawals
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: currencies
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - BTC
                - EUR
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - activity
  /user/email_transfers:
    post:
      tags:
        - Transfer
      summary: Create email transfer
      operationId: create-email-transfer
      description: Initiate a money transfer to an e-mail address. The transfer is immediately executed if the user have a valid account. Otherwise, an e-mail is sent with a registration invitation. This transfer expire after 1 month if it is not collected. In this case, the order is cancelled and the sender re-credited.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privatePostUserEmailTransfers({ "currency": "BTC", "amount": "1.0", "email": "johnsmith@example.com", "comment": "For your savings" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privatePostUserEmailTransfers({ "currency": "BTC", "amount": "1.0", "email": "johnsmith@example.com", "comment": "For your savings" }))
      parameters:
        - name: amount
          in: query
          description: amount to transfer
          schema:
            type: number
        - name: currency
          in: query
          schema:
            type: string
            enum:
              - BTC
              - EUR
        - name: email
          in: query
          description: an e-mail address
          schema:
            type: string
        - name: comment
          in: query
          description: a small note explaining the transfer
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: User must be approved.
          content: {}
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - withdraw
  /user/payment_requests:
    post:
      tags:
        - Transfer
      summary: Create payment request
      operationId: create-payment-request
      description: This functionality allows one to create a payment request that is sent by e-mail to the designated recipient, when the link contained in the e-mail is clicked, the recipient is presented with a Bitcoin address to which he is instructed to direct his payment. Once the Bitcoin payment is confirmed, the payee is credited in the originally requested currency.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privatePostUserPaymentRequests({ "currency": "BTC", "amount": "0.001", "email": "johnsmith@example.com", "comment": "For the restaurant", "payment_split": "0" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privatePostUserPaymentRequests({ "currency": "BTC", "amount": "1.0", "email": "johnsmith@example.com", "comment": "For the restaurant", "payment_split": "0.5" }))
      parameters:
        - name: currency
          in: query
          schema:
            type: string
            enum:
              - BTC
              - EUR
        - name: amount
          in: query
          description: amount to transfer
          schema:
            type: number
        - name: email
          in: query
          description: an e-mail address
          schema:
            type: string
        - name: payment_split
          in: query
          description: Percentage of the payment the merchant will get in currency expressed as a two-decimal places float between 0 and 1 (required). Warning, when one request bitcoin, payment split must be 0.
          schema:
            type: number
        - name: comment
          in: query
          description: a small note explaining the transfer
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                      examples:
                        - 6cecd395-92bf-4da6-8f2c-0611940ea0bb
                    label:
                      type: string
                      description: description of the reasons for the payment
                      examples:
                        - For the restaurant
                    currency:
                      type: string
                      examples:
                        - BTC
                    payment_split:
                      type: string
                      description: split proposed to the other person
                      examples:
                        - '0.0'
                    requires_customer_email:
                      type: boolean
                      examples:
                        - false
                    requires_delivery_address:
                      type: boolean
                      examples:
                        - false
                    amount:
                      type: string
                      description: amount of BTC asked
                      examples:
                        - '0.01'
                    created_at:
                      type: string
                      examples:
                        - '1688138855'
                    updated_at:
                      type: string
                      examples:
                        - '1688138855'
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - payment_request
  /user/addresses:
    get:
      tags:
        - User
      summary: List deposit addresses
      operationId: get-deposit-addresses
      description: Retrieve your Bitcoin deposit addresses along with their expiration timestamp.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privateGetUserAddresses())
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privateGetUserAddresses())
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '403':
          description: User must be approved.
          content: {}
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - deposit
    post:
      tags:
        - User
      summary: Create deposit address
      operationId: create-deposit-address
      description: Create a new deposit address unless 5 other one are already active. Currencies available are the ones which support a deposit.
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privatePostUserAddresses({ currency: 'BTC' }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privatePostUserAddresses('BTC'))
      parameters:
        - name: currency
          in: query
          description: The currency for which the deposit address will be created
          schema:
            type: string
          example: BTC
        - name: label
          in: query
          description: A label for the wallet address
          schema:
            type: string
          example: Savings
      responses:
        '201':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Address'
        '403':
          description: User must be approved.
          content: {}
        '422':
          description: Too many active addresses
          content: {}
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - deposit
  /user/addresses/{address}:
    get:
      tags:
        - User
      summary: Get deposit address
      operationId: get-deposit-address
      description: Retrieve details for a single address
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require ('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_SECRET_PRIVATE_KEY',
              })

              console.log(paymium.id, await paymium.privateGetUserAddressesAddress({"address": "1HdjGr5WCHcnmW1tNNsHX7fh4Jr6C3PeKe" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privateGetUserAddressesAddress({"address": "1HdjGr5WCHcnmW1tNNsHX7fh4Jr6C3PeKe"})))
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
          example: 1FPDBXNqSkZMsw1kSkkajcj8berxDQkUoc
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Address'
        '403':
          description: User must be approved.
          content: {}
        '404':
          description: Address not found
          content: {}
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - deposit
  /merchant/create_payment:
    post:
      tags:
        - Merchant
      summary: Create merchant payment
      description: Create merchant payment
      operationId: create-merchant-payment
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_PRIVATE_API_KEY',
              })

              console.log(paymium.id, await paymium.privatePostMerchantCreatePayment({
                "amount": "0.0001",
                "payment_split": "0",
                "currency": "BTC",
                "callback_url": "https://myonlineshop/payments/order-987978/callback",
                "redirect_url": "http://myonlineshop/payments/order-987978/success",
                "merchant_reference": "order-987978"
              }))
            })();
        - lang: Python
          source: |-
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privatePostMerchantCreatePayment({
              "amount": "0.0001",
              "payment_split": "0",
              "currency": "BTC",
              "callback_url": "https://myonlineshop/payments/order-987978/callback",
              "redirect_url": "http://myonlineshop/payments/order-987978/success",
              "merchant_reference": "order-987978"
            }))
      parameters:
        - name: amount
          in: query
          description: amount requested for the payment
          required: true
          schema:
            type: number
          example: 0.001
        - name: payment_split
          in: query
          description: Percentage of the payment the merchant will get in currency expressed as a two-decimal places float between 0 and 1
          required: true
          schema:
            type: number
          example: 0.5
        - name: currency
          in: query
          required: true
          schema:
            type: string
            enum:
              - BTC
              - EUR
        - name: callback_url
          in: query
          description: Merchant callback URL, it is called when the state of the payment changes
          schema:
            type: string
          example: http://myonlineshop/payments/order-987978/callback
        - name: redirect_url
          in: query
          description: URL to which the customer should be redirected at upon payment
          schema:
            type: string
          example: http://myonlineshop/payments/order-987978/success
        - name: cancel_url
          in: query
          description: URL to which the customer should be redirected when cancelling
          schema:
            type: string
          example: http://myonlineshop/payments/order-987978/cancel
        - name: merchant_reference
          in: query
          description: Arbitrary merchant data associated to the payment
          schema:
            type: string
          example: order-987978
      responses:
        '201':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Payment'
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - merchant
  /merchant/get_payment/{uuid}:
    get:
      tags:
        - Merchant
      summary: Get merchant payment
      operationId: get-merchant-payment
      description: Get merchant payment
      x-codeSamples:
        - lang: JavaScript
          source: |
            'use strict';
            const ccxt = require('ccxt');

            (async function () {
              let paymium = new ccxt.paymium({
                apiKey: 'YOUR_PUBLIC_API_KEY',
                secret: 'YOUR_PRIVATE_API_KEY',
              })

              console.log(paymium.id, await paymium.privateGetMerchantGetPaymentUuid({ "uuid": "0a31a001-2deb-48f1-b413-f1a31a9f97c1" }))
            })();
        - lang: Python
          source: |
            # coding=utf-8

            import ccxt

            paymium = ccxt.paymium({
              'apiKey': 'YOUR_PUBLIC_API_KEY',
              'secret': 'YOUR_SECRET_PRIVATE_KEY',
            })

            print(paymium.privateGetMerchantGetPaymentUuid({ "uuid": "0a31a001-2deb-48f1-b413-f1a31a9f97c1" }))
      parameters:
        - name: uuid
          in: path
          description: payment identifier
          required: true
          schema:
            type: string
          example: 458f4580-e26c-4ad8-8bcd-874d23d55296
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Payment'
      security:
        - ApiKey: []
          ApiSignature: []
          ApiNonce: []
        - OAuth2:
            - merchant
components:
  securitySchemes:
    ApiKey:
      type: apiKey
      description: Api-key is the token that is displayed when listing your currently active tokens must be used with Api-Signature and Api-Nonce.
      name: Api-Key
      in: header
    ApiSignature:
      type: apiKey
      description: Api-Signature is the hexdigest of the HMAC-SHA256 hash of the nonce concatenated with the full URL and body of the HTTP request, encoded using your API secret key. Must be used with Api-Key and Api-Nonce
      name: Api-Signature
      in: header
    ApiNonce:
      type: apiKey
      description: The nonce is a positive integer number that must increase with every request you make. Must be used with Api-key and Api-Signature
      name: Api-Nonce
      in: header
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://paymium.com/api/oauth/authorize
          tokenUrl: https://paymium.com/api/oauth/token
          scopes:
            basic: Read account number, language, and balances (default)
            activity: Read trade orders, deposits, withdrawals, and other operations
            trade: Create and cancel trade orders
            withdraw: Request EUR and BTC withdrawals (requires email confirmation from users upon withdrawing)
            payment_request: Used to requesting money by e-mail
            deposit: List bitcoin deposit addresses and create a new one if needed
            merchant: Create and manage an account's invoices
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        default: 1
        minimum: 1
    PerPageParam:
      name: per_page
      in: query
      description: Item per page
      schema:
        type: integer
        default: 20
        minimum: 5
        maximum: 100
  schemas:
    AccountOperation:
      type: object
      properties:
        uuid:
          type: string
          description: unique id
          examples:
            - 968f4580-e26c-4ad8-8bcd-874d23d55296
        amount:
          type: string
          description: currency amount
          examples:
            - '1.0'
        currency:
          type: string
          description: currency
          examples:
            - BTC
        created_at:
          type: string
          description: date created
          format: date-time
          examples:
            - '2013-10-24T10:34:37Z'
        created_at_int:
          type: integer
          description: Number of seconds since Unix Epoch of the trade
          examples:
            - 1389094259
        name:
          type: string
          description: operation name
          examples:
            - account_operation
        address:
          type: string
          description: bitcoin address if any
          examples:
            - 1FPDBXNqSkZMsw1kSkkajcj8berxDQkUoc
        tx_hash:
          type: string
          description: bitcoin transaction hash if any
        is_trading_account:
          type: boolean
          description: whether the trading account is targeted
    TradingOrder:
      type: object
      properties:
        uuid:
          type: string
          description: unique id
          examples:
            - 968f4580-e26c-4ad8-8bcd-874d23d55296
        currency_amount:
          type: string
          description: ''
        state:
          type: string
          description: order state
          examples:
            - executed
        btc_fee:
          type: string
          description: btc fee collected
          examples:
            - '0.0'
        currency_fee:
          type: string
          description: currency fee collected
          examples:
            - '0.0'
        created_at:
          type: string
          description: date created
          format: date-time
          examples:
            - '2013-10-24T10:34:37Z'
        updated_at:
          type: string
          description: date created
          format: date-time
          examples:
            - '2013-10-24T10:34:37Z'
        currency:
          type: string
          description: currency
          examples:
            - BTC
        comment:
          type: string
          description: optional comment
        amount:
          type: string
          description: currency amount
          examples:
            - '1.0'
        type:
          type: string
          description: order type
          enum:
            - MarketOrder
            - LimitOrder
        traded_btc:
          type: string
        traded_currency:
          type: string
        direction:
          type: string
          examples:
            - buy
        price:
          type: string
        account_operations:
          type: array
          items:
            $ref: '#/components/schemas/AccountOperation'
    Order:
      type: object
      properties:
        uuid:
          type: string
          description: unique id
          examples:
            - 968f4580-e26c-4ad8-8bcd-874d23d55296
        currency_amount:
          type: string
          description: ''
        state:
          type: string
          description: order state
          examples:
            - executed
        btc_fee:
          type: string
          description: btc fee collected
          examples:
            - '0.0'
        currency_fee:
          type: string
          description: currency fee collected
          examples:
            - '0.0'
        created_at:
          type: string
          description: date created
          format: date-time
          examples:
            - '2013-10-24T10:34:37Z'
        updated_at:
          type: string
          description: date created
          format: date-time
          examples:
            - '2013-10-24T10:34:37Z'
        currency:
          type: string
          description: currency
          examples:
            - BTC
        comment:
          type: string
          description: optional comment
        amount:
          type: string
          description: currency amount
          examples:
            - '1.0'
        type:
          type: string
          description: order type
          enum:
            - BitcoinTransfer
            - CryptoTransfer
            - BchTransfer
            - WireTransfer
        traded_btc:
          type: string
        traded_currency:
          type: string
        direction:
          type: string
          examples:
            - buy
        price:
          type: string
        account_operations:
          type: array
          items:
            $ref: '#/components/schemas/AccountOperation'
    MarketProtection:
      type: object
      properties:
        error:
          type: string
          description: market_protection_volume_too_large
          examples:
            - market_protection_volume_too_large
        max_order_amount:
          type: string
          description: max amount according to current market conditions to complete this market order
          examples:
            - '4.3'
        currency:
          type: string
          description: currency unit
          examples:
            - BTC
        side:
          type: string
          description: market order side
          examples:
            - sell
            - buy
    Address:
      type: object
      properties:
        address:
          type: string
          examples:
            - 1HdjGr6WCTcnmW1tNNsHX7fh4Jr5C2PeKe
        valid_until:
          type: integer
          description: Expiration timestamp (Number of seconds since Unix Epoch)
          examples:
            - 1620041926
        label:
          type: string
          description: A label for the address
          examples:
            - Savings
        currency:
          type: string
          description: The list can be seen using Get Currencies
          enum:
            - BTC
            - EUR
    Payment:
      type: object
      properties:
        uuid:
          type: string
          description: Payment identifier
          examples:
            - 8f60c9df-76da-4618-906d-52af659baddf
        currency:
          type: string
          description: Currency of the payment (EUR/BTC)
          examples:
            - BTC
        payment_split:
          type: number
          description: Percentage of the payment the merchant will get in currency
        state:
          type: string
          examples:
            - pending_payment
          enum:
            - pending_payment
            - processing
            - paid
            - error
            - btc_forwarded
            - expired
        callback_url:
          type: string
          description: merchant notification url
          examples:
            - https://myonlineshop/payments/order-987978/callback
        redirect_url:
          type: string
          description: Redirection url to which the customer is redirected on success
          examples:
            - http://myonlineshop/payments/order-987978/success
        cancel_url:
          type: string
          description: URL to which the customer should be redirected when cancelling
          examples:
            - http://myonlineshop/payments/order-987978/cancel
        merchant_name:
          type: string
          description: Internal name of the merchant
          examples:
            - PM-U24582195
        expires_at:
          type: integer
          description: expiration timestamp (Number of seconds since Unix Epoch)
          examples:
            - 1619449070
        merchant_reference:
          type: string
          description: merchant reference for the order
          examples:
            - order-987978
        amount:
          type: string
          description: amount of the payment in the choosen currency
          examples:
            - '0.0001'
        btc_amount:
          type: string
          description: BTC amount to pay
          examples:
            - '0.0001'
        payment_address:
          type: string
          description: wallet address for the payment
          examples:
            - 1H7X3bH8r5snj8vqXRCPnQ8Ewn6AHfVd9j
        created_at:
          type: integer
          description: creation timestamp (Number of seconds since Unix Epoch)
          examples:
            - 1619447270
        updated_at:
          type: integer
          description: Last update timestamp (Number of seconds since Unix Epoch)
          examples:
            - 1619447270
        account_operations:
          $ref: '#/components/schemas/AccountOperation'
